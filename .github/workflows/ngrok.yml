lydi
lydih
Invisible

boris9306 ‚Äî 08:37
-------------------------------------------------------------------------
ATELIER 1 : CMAKE
-------------------------------------------------------------------------
L'automatisation de la compilation, pipeline de tests
Cliquez sur ce lien  et suivez les instructions : https://github.com/OpenRSI/Atelier_CMAKE
Travail demand√© : Coller l'URL de votre Repository GitHub dans la discussion g√©n√©ral de ce Discord
boris9306 ‚Äî 13:12
------------------------------------------------------------------------
ATELIER 2 : Industrialisation continu d'un serveur Web (Flask - Python)
------------------------------------------------------------------------
Automatisation du d√©ploiement de code Web.
Cliquez sur ce lien et suivez les instructions : https://github.com/OpenRSI/Flask_Hello_World
boris9306 ‚Äî 14:54
------------------------------------------------------------------------
ATELIER 3 : Industrialisation continu d'un serveur Web temporaire 
------------------------------------------------------------------------
Votre action va cr√©er une image docker (via Dockerfile) pour permettre de faire fonctionner votre serveur Flask.
Ce serveur Flask exposera le contenu de votre Repository GitHub sur Internet (Preview) via la solution ngrok qui vous fournira un DNS.
Le lien Internet temporaire sera accessible (visible depuis les logs de votre action) pendant 120 seconde
boris9306 ‚Äî 15:33
Atelier 3bis : Puisque vous exposez temporairement des API, profitez en pour les tests avec la biblioth√®que pytest
Si l'API est op√©rationnelle alors vous aurrez un code 200 dans vos logs
boris9306 ‚Äî 16:09
Correction :
name: Docker + ngrok + Tests pytest
on: 
  push:
    branches: [ main, master ]

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install pytest dependencies ONLY
      run: |
        pip install pytest==7.4.0 requests==2.31.0
        
    - name: Build Docker image
      run: |
        docker build -t flask-app .
        
    - name: Deploy et r√©cup√©rer URL
      run: |
        # Installer ngrok - CORRECTION ICI
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
        
        # Configurer le token
        ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}
        
        # Lancer l'app Flask
        docker run -d -p 5000:5000 --name flask-container flask-app
        sleep 10
        
        # V√©rifier que l'app Flask r√©pond localement
        echo "üîç Test local de l'app Flask..."
        curl -f http://localhost:5000/ || (echo "‚ùå App Flask ne r√©pond pas localement" && docker logs flask-container && exit 1)
        echo "‚úÖ App Flask r√©pond localement"
        
        # Lancer ngrok
        ngrok http 5000 --log=stdout > /tmp/ngrok.log 2>&1 &
        sleep 25
        
        # R√©cup√©rer l'URL avec plusieurs tentatives
        for i in {1..5}; do
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*https[^"]*' | cut -d'"' -f4 | head -1)
          if [ -n "$NGROK_URL" ]; then
            break
          fi
          echo "Tentative $i/5 pour r√©cup√©rer l'URL..."
          sleep 5
        done
        
        if [ -n "$NGROK_URL" ]; then
          echo "üåê Application accessible sur : $NGROK_URL"
          
          # Test de connectivit√© ngrok
          echo "üîç Test de connectivit√© ngrok..."
          for i in {1..3}; do
            if curl -f -s "$NGROK_URL/" > /dev/null; then
              echo "‚úÖ ngrok tunnel OK"
              echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
              break
            else
              echo "Tentative $i/3 de connexion ngrok..."
              sleep 10
            fi
          done
          
          if [ -z "$(curl -s "$NGROK_URL/" || echo '')" ]; then
            echo "‚ùå ngrok tunnel ne r√©pond pas"
            exit 1
          fi
          
        else
          echo "‚ùå Pas d'URL trouv√©e"
          cat /tmp/ngrok.log
          exit 1
        fi
        
    - name: Run pytest tests
      env:
        NGROK_URL: ${{ env.NGROK_URL }}
      run: |
        echo "üß™ === TESTS PYTEST ==="
        echo "URL test√©e : $NGROK_URL"
        
        # Lancer pytest depuis un dossier s√©par√© pour √©viter l'import de __init__.py
        mkdir /tmp/tests
        cp test_app.py /tmp/tests/
        cp conftest.py /tmp/tests/
        cd /tmp/tests
        
        pytest test_app.py -v --tb=short -s
... (12lignes restantes)
R√©duire
docker-ngrok.yml
4 Ko
FROM python:3.9-slim

WORKDIR /Flask_Hello_World

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 5000

CMD ["python", "__init__.py"]
R√©duire
Dockerfile.txt
1 Ko
Flask==2.3.3
pytest==7.4.0
requests==2.31.0
requirements.txt
1 Ko
import pytest
import requests
import os

def test_routes_status_code():
    """Test que toutes les routes retournent un code 200"""
    
    ngrok_url = os.environ.get('NGROK_URL', '').rstrip('/')
    if not ngrok_url:
        pytest.fail("NGROK_URL non d√©finie")
    
    routes_to_test = [
        "/",
        "/exercices/", 
        "/contact/",
        "/calcul_carre/5",
        "/somme/10/15"
    ]
    
    print(f"üß™ Testing URL: {ngrok_url}")
    
    for route in routes_to_test:
        url = f"{ngrok_url}{route}"
        print(f"Testing: {url}")
        
        try:
            response = requests.get(url, timeout=15)
            print(f"Response: {response.status_code}")
            assert response.status_code == 200, f"Route {route} returned {response.status_code}"
            print(f"‚úÖ {route} ‚Üí 200 OK")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Connection error on {route}: {e}")
            pytest.fail(f"Connection failed for {route}: {e}")

def test_content_verification():
    """Test que le contenu attendu est pr√©sent"""
    
    ngrok_url = os.environ.get('NGROK_URL', '').rstrip('/')
    if not ngrok_url:
        pytest.fail("NGROK_URL non d√©finie")
    
    try:
        # Test page d'accueil
        response = requests.get(f"{ngrok_url}/", timeout=15)
        assert response.status_code == 200
        assert "Bonjour tout le monde" in response.text
        print("‚úÖ Page d'accueil OK")
        
        # Test calcul carr√©
        response = requests.get(f"{ngrok_url}/calcul_carre/5", timeout=15)
        assert response.status_code == 200
        assert "25" in response.text
        print("‚úÖ Calcul carr√© OK")
        
    except requests.exceptions.RequestException as e:
        pytest.fail(f"Content test failed: {e}")
R√©duire
test_app.py
2 Ko
+ Cr√©er un Token Ngork
boris9306 ‚Äî 16:36
# conftest.py - Fichier vide pour √É¬©viter auto-import
pass
conftest.py
1 Ko
Yann Bg ‚Äî 16:42
+ modifier  app.run dans le init.py par:
if name == "main":
  app.run(debug=True, host='0.0.0.0', port=5000)
Ôªø
name: Docker + ngrok + Tests pytest
on: 
  push:
    branches: [ main, master ]

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install pytest dependencies ONLY
      run: |
        pip install pytest==7.4.0 requests==2.31.0
        
    - name: Build Docker image
      run: |
        docker build -t flask-app .
        
    - name: Deploy et r√©cup√©rer URL
      run: |
        # Installer ngrok - CORRECTION ICI
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
        
        # Configurer le token
        ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}
        
        # Lancer l'app Flask
        docker run -d -p 5000:5000 --name flask-container flask-app
        sleep 10
        
        # V√©rifier que l'app Flask r√©pond localement
        echo "üîç Test local de l'app Flask..."
        curl -f http://localhost:5000/ || (echo "‚ùå App Flask ne r√©pond pas localement" && docker logs flask-container && exit 1)
        echo "‚úÖ App Flask r√©pond localement"
        
        # Lancer ngrok
        ngrok http 5000 --log=stdout > /tmp/ngrok.log 2>&1 &
        sleep 25
        
        # R√©cup√©rer l'URL avec plusieurs tentatives
        for i in {1..5}; do
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*https[^"]*' | cut -d'"' -f4 | head -1)
          if [ -n "$NGROK_URL" ]; then
            break
          fi
          echo "Tentative $i/5 pour r√©cup√©rer l'URL..."
          sleep 5
        done
        
        if [ -n "$NGROK_URL" ]; then
          echo "üåê Application accessible sur : $NGROK_URL"
          
          # Test de connectivit√© ngrok
          echo "üîç Test de connectivit√© ngrok..."
          for i in {1..3}; do
            if curl -f -s "$NGROK_URL/" > /dev/null; then
              echo "‚úÖ ngrok tunnel OK"
              echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
              break
            else
              echo "Tentative $i/3 de connexion ngrok..."
              sleep 10
            fi
          done
          
          if [ -z "$(curl -s "$NGROK_URL/" || echo '')" ]; then
            echo "‚ùå ngrok tunnel ne r√©pond pas"
            exit 1
          fi
          
        else
          echo "‚ùå Pas d'URL trouv√©e"
          cat /tmp/ngrok.log
          exit 1
        fi
        
    - name: Run pytest tests
      env:
        NGROK_URL: ${{ env.NGROK_URL }}
      run: |
        echo "üß™ === TESTS PYTEST ==="
        echo "URL test√©e : $NGROK_URL"
        
        # Lancer pytest depuis un dossier s√©par√© pour √©viter l'import de __init__.py
        mkdir /tmp/tests
        cp test_app.py /tmp/tests/
        cp conftest.py /tmp/tests/
        cd /tmp/tests
        
        pytest test_app.py -v --tb=short -s
        
    - name: Keep alive
      run: |
        echo ""
        echo "URL disponible pendant 120 secondes pour tests manuels : $NGROK_URL"
        sleep 30
        echo "URL disponible pendant 90 secondes pour tests manuels : $NGROK_URL"
        sleep 30
        echo "URL disponible pendant 60 secondes pour tests manuels : $NGROK_URL"
        sleep 60
        echo "‚èπÔ∏è Preview termin√©"
